package rules.requirement
import java.util.List;
import java.util.Arrays;
import com.Q2S.Q2S_Senior_Project.Models.Requirement;
import com.Q2S.Q2S_Senior_Project.Models.Degree;

rule "CSC101 Requirement"
when
    req: Requirement(name == "CSC101 Requirement")
    degree: Degree(courses != null)
then
    req.setMet(degree.getCourses().contains("CSC101"));
end

rule "Life Science Elective"
when
    req: Requirement(name == "Life Science Elective")
    degree: Degree(courses != null)
then
    req.setMet(degree.getCourses().contains("BIO111") ||
                degree.getCourses().contains("BIO161") ||
                degree.getCourses().contains("BOT121") ||
                degree.getCourses().contains("MCRO221") ||
                degree.getCourses().contains("MCRO224") ||
                (degree.getCourses().contains("BIO213") && degree.getCourses().contains("BMED213")));
end

rule "Math Elective"
when
    req: Requirement(name == "Math Elective")
    degree: Degree(courses != null)
then
    req.setMet(degree.getCourses().contains("MATH248") ||
                    degree.getCourses().contains("MATH304") ||
                    degree.getCourses().contains("MATH335") ||
                    degree.getCourses().contains("MATH336") ||
                    degree.getCourses().contains("MATH451"));
end


//
//rule "Check all requirements"
//salience -1
//when
//    // Count the number of met requirements
//    $count: Number(intValue >= 1) from accumulate(
//        Requirement(met == true),
//        count()
//    )
//    // Count the total number of requirements
//    $total: Number(intValue > 0) from accumulate(
//        Requirement(),
//        count()
//    )
//    // Ensure all requirements are met
//    eval($count == $total)
//    // Collect the names of requirements that are not met
//    $failedReqs: List() from accumulate(
//        Requirement(!met),
//        collectList(name)
//    )
//then
//    if ($count == $total) {
//        System.out.println("All requirements are met!");
//    } else {
//        System.out.println("Some requirements are not met:");
//        for (String reqName : $failedReqs) {
//            System.out.println("- " + reqName);
//        }
//    }
//end

//make degree object that has a map of requirements

//for degree requirements, have "validate" button to check if all met
// at the time of validate -- map all to graduating catalog so don't ahve to requirement map
//do course mappings dynamically
//go through courses and compare against each requirement

//figure out ands/ors
// need to populate database to test
//flowchart (list of classes) will be input to SE rules
// each rule is a requirement


